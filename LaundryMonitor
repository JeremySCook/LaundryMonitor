// Instructables Internet of Things Class sample code
// Circuit Triggers Internet Action
// A button press is detected and stored in a feed
// An LED is used as confirmation feedback
//
// Modified by Becky Stern 2017
// based on the Adafruit IO Digital Input Example
// Tutorial Link: https://learn.adafruit.com/adafruit-io-basics-digital-input
//
// Adafruit invests time and resources providing this open source code.
// Please support Adafruit and open source hardware by purchasing
// products from Adafruit!
//
// Written by Todd Treece for Adafruit Industries
// Copyright (c) 2016 Adafruit Industries
// Licensed under the MIT license.
//
// All text above must be included in any redistribution.
//
//Modified by Jeremy S. Cook 5/24/2018 in order to act as part of a washing machine/dryer
//monitor device.

/************************ Adafruit IO Configuration *******************************/

// visit io.adafruit.com if you need to create an account,
// or if you need your Adafruit IO key.
#define IO_USERNAME    "username"
#define IO_KEY         "key"

/******************************* WIFI Configuration **************************************/

#define WIFI_SSID       "WiFi SSID"
#define WIFI_PASS       "WiFi Password"

#include "AdafruitIO_WiFi.h"
AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);

/************************ Main Program Starts Here *******************************/
#include <ESP8266WiFi.h>
#include <AdafruitIO.h>
#include <Adafruit_MQTT.h>
#include <ArduinoHttpClient.h>

// set up the 'command' feed
AdafruitIO_Feed *command = io.feed("laundrysensor");
unsigned long ShakeTime;
unsigned long NoShakeTime;

void setup() {
  
  //setup pins
  pinMode(D8, INPUT); //pin setup to hold system on via transistor
  pinMode(BUILTIN_LED, OUTPUT); //LED stays on

  // start the serial connection
  Serial.begin(115200);

  // connect to io.adafruit.com
  Serial.print("Connecting to Adafruit IO");
  io.connect();
  
  // set up a message handler for the 'command' feed.
  // the handleMessage function (defined below)
  // will be called whenever a message is
  // received from adafruit io.
  command->onMessage(handleMessage);

  // wait for a connection
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  command->save(0); //notes that laundry monitoring started

  // we are connected
  Serial.println();
  Serial.println(io.statusText());

}

void loop() {

  // io.run(); is required for all sketches.
  // it should always be present at the top of your loop
  // function. it keeps the client connected to
  // io.adafruit.com, and processes any incoming data.
  io.run();
  digitalWrite(BUILTIN_LED, HIGH); //turns off built in LED (active low)
  delay(100);
  NoShakeTime = millis();
  int ShakeSensor = digitalRead(D8);
  if (ShakeSensor == 1){ 
    ShakeTime = millis();
    digitalWrite(BUILTIN_LED, LOW); //turns built in LED on
    delay(500);
    digitalWrite(BUILTIN_LED, HIGH); //turns LED off
  }
  if ((NoShakeTime - ShakeTime) > 600000){ 
    command->save(1); //notes that the laundry is done (10 minutes w/o shaking)
    for (int y = 0; y < 6; y++){
      digitalWrite(BUILTIN_LED, LOW);
      delay(375);
      digitalWrite(BUILTIN_LED, HIGH);
      delay(375);
    }
    delay(1000); //stay in this state 1 second after feed is transmitted
    for (int x = 0; x < 120; x++) delay(30000); //wait an hour to start over if not turned off.
  }
  Serial.println("NoShakeTime");
  Serial.println(NoShakeTime);
  Serial.println("ShakeTime");
  Serial.println(ShakeTime);
  }

// this function is called whenever a 'command' message
// is received from Adafruit IO. it was attached to
// the command feed in the setup() function above.
void handleMessage(AdafruitIO_Data *data) {

  int command = data->toInt();

  if (command == 1){ //light up the LED
    Serial.print("received <- ");
    Serial.println(command);
  } else {
    Serial.print("received <- ");
    Serial.println(command);
  }
}
